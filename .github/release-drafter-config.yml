# .github/release-drafter-config.yml

# Template for the name of the release
# $NEXT_PATCH_VERSION, $NEXT_MINOR_VERSION, $NEXT_MAJOR_VERSION are available
name-template: 'Lunaris Codex v$NEXT_PATCH_VERSION'
# Template for the tag associated with the release
tag-template: 'v$NEXT_PATCH_VERSION'

# Categorize PRs based on their labels.
# Order of categories here determines order in release notes.
categories:
  - title: 'üöÄ New Features & Enhancements'
    labels:
      - 'feature'
      - 'enhancement'
  - title: 'üêõ Bug Fixes'
    labels:
      - 'fix'
      - 'bug'
  - title: 'üõ†Ô∏è Internal Improvements & Refactoring' # Mais profissional que "Chores"
    labels:
      - 'chore'
      - 'refactor'
      - 'build' # Build system changes
  - title: 'üß™ Tests & Continuous Integration'
    labels:
      - 'test'
      - 'tests'
      - 'ci'
  - title: 'üìö Documentation Updates'
    labels:
      - 'documentation'
  - title: 'üî© Dependency Updates'
    labels:
      - 'dependencies'

# Template for each change (Pull Request) within a category.
# $TITLE: PR title
# $NUMBER: PR number
# $AUTHOR: PR author's username
# $URL: PR URL
change-template: '- $TITLE (#$NUMBER) by @$AUTHOR'
# Template for when no changes are found for a category (optional)
# no-changes-template: 'No significant changes in this category.'

# Template for the entire release notes body.
template: |
  ## What's New in v$RESOLVED_VERSION

  $CHANGES

  **Full Changelog**: https://github.com/$OWNER/$REPOSITORY/compare/$PREVIOUS_TAG...v$RESOLVED_VERSION

  ---
  *This changelog was auto-generated by [Release Drafter](https://github.com/release-drafter/release-drafter).*

# Exclude Pull Requests with these labels from the release notes.
exclude-labels:
  - 'skip-changelog'
  - 'wontfix'
  - 'invalid'

# Autolabeler: Automatically add labels to PRs based on branch name or title (optional but useful)
# autolabeler:
#   - label: 'documentation'
#     branch:
#       - '/docs-.*/' # PRs from branches starting with docs-
#     title:
#       - '/docs:/i'  # PR titles starting with "docs:"
#   - label: 'ci'
#     branch:
#       - '/ci-.*/'
#     title:
#       - '/ci:/i'
#       - '/chore\(ci\):/i'

# Version Resolver: How to determine the next version number.
# Since your last release was v0.4.0, we want the next to be v0.4.1 (patch)
# or v0.5.0 (minor) etc., based on PR labels.
version-resolver:
  major:
    labels:
      - 'breaking-change' # Label a PR with this for a major version bump
      - 'major'
  minor:
    labels:
      - 'feature' # Features usually warrant a minor bump
      - 'minor'
  patch:
    labels:
      - 'fix'
      - 'bug'
      - 'documentation'
      - 'chore'
      - 'refactor'
      - 'dependencies'
      - 'test'
      - 'ci'
      - 'build'
  default: patch # If no versioning label is found on merged PRs, assume a patch.

# The $PREVIOUS_TAG variable will be the last release tag (e.g., v0.4.0).
# $RESOLVED_VERSION will be the newly calculated version based on the resolver.
# $NEXT_PATCH_VERSION, $NEXT_MINOR_VERSION, $NEXT_MAJOR_VERSION are based on incrementing the previous tag.
# We will use $RESOLVED_VERSION in name/tag templates to reflect the calculated version.
# So, change name-template and tag-template to use $RESOLVED_VERSION:
name-template: 'Lunaris Codex $RESOLVED_VERSION' # Removido emoji, 'v' adicionado pelo tag
tag-template: 'v$RESOLVED_VERSION'

# Sort changes within categories by title or merge date (optional)
# sort-by: 'title' # 'merged_at'
# sort-direction: 'ascending' # 'descending'
