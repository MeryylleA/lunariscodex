name: Test Model Module

on:
  push:
    branches: [ main ]
    paths: # Aciona o workflow se houver mudanças nestes caminhos
      - 'model.py'
      - 'tests/test_model.py' # Ou 'tests/**' para qualquer arquivo em tests
      - '.github/workflows/test_model_module.yml' # Para mudanças no próprio workflow
  pull_request:
    branches: [ main ]
    paths:
      - 'model.py'
      - 'tests/test_model.py' # Ou 'tests/**'
      - '.github/workflows/test_model_module.yml'
  workflow_dispatch: # Permite acionamento manual

jobs:
  run-model-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11'] # Testar em algumas versões do Python

    name: Test model.py (Python ${{ matrix.python-version }})

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          # Chave de cache mais específica para este job
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-moduletests-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ matrix.python-version }}-moduletests-

      - name: Install dependencies
        run: |
          python -m venv .venv-model-test
          source .venv-model-test/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov # Dependências de teste

      - name: Run Pytest for model.py
        run: |
          source .venv-model-test/bin/activate
          # PYTHONPATH=. garante que 'model.py' na raiz seja encontrável
          # Alternativamente, se model.py está em src/lunaris_codex/, seria PYTHONPATH=src/
          echo "Running tests from directory: $(pwd)"
          echo "Listing files in root: $(ls -a)"
          echo "Listing files in tests/: $(ls -a tests/)"
          PYTHONPATH=. pytest tests/test_model.py --cov=model --cov-report=term-missing --cov-report=xml -v
          # -v para verbose output
          # term-missing mostra as linhas não cobertas

      - name: Upload coverage reports to Codecov
        if: success() # Só roda se os testes passarem
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Opcional: se você configurar Codecov.io
          files: ./coverage.xml # pytest-cov gera coverage.xml
          flags: model_tests # Para agrupar relatórios no Codecov.io
          name: codecov-model-tests # Nome do upload
          fail_ci_if_error: true # Opcional
          verbose: true # Opcional
