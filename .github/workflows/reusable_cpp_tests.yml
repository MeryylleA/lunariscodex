name: Reusable C++ Build and Test

on:
  workflow_call:
    inputs:
      test_matrix_json:
        description: 'JSON string of the OS matrix for tests'
        required: true
        type: string
    outputs:
      cpp_test_result:
        description: "Result of the C++ tests"
        value: ${{ jobs.cpp_utilities.result }}

env:
  CXXFLAGS_MODE: RELEASE
  PYTHONUTF8: "1"

jobs:
  cpp_utilities:
    name: C++ Build & Test (${{ matrix.os.display }})
    runs-on: ${{ matrix.os.runner }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(inputs.test_matrix_json) }}
    defaults:
      run:
        shell: bash
    outputs:
      text_cleaner_exec_path: ${{ steps.executables.outputs.text_cleaner_exec }}
      data_analyzer_exec_path: ${{ steps.executables.outputs.data_analyzer_exec }}
      bpe_processor_exec_path: ${{ steps.executables.outputs.bpe_processor_exec }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Build Dependencies (Ubuntu)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y nlohmann-json3-dev build-essential
          g++ --version

      - name: Cache C++ Executables
        id: cache_executables
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/text_cleaner/lunaris_text_cleaner
            ${{ github.workspace }}/data_analyzer/lunaris_data_analyzer
            ${{ github.workspace }}/bpe_trainer/bpe_processor
          key: ${{ matrix.os.runner }}-cpp-exec-v1-${{ hashFiles('Makefile', 'text_cleaner/**/*.cpp', 'text_cleaner/**/*.hpp', 'data_analyzer/**/*.cpp', 'data_analyzer/**/*.hpp', 'bpe_trainer/**/*.cpp', 'bpe_trainer/**/*.hpp') }}
          restore-keys: |
            ${{ matrix.os.runner }}-cpp-exec-v1-

      - name: Clean Previous Build Artifacts (if no cache hit)
        if: steps.cache_executables.outputs.cache-hit != 'true'
        run: make clean || echo "Clean failed or no artifacts to clean."

      - name: Build C++ Utilities (if no cache hit)
        if: steps.cache_executables.outputs.cache-hit != 'true'
        run: make all CXXFLAGS_MODE=${{ env.CXXFLAGS_MODE }}
      
      - name: List files after potential build/cache restore
        run: |
          ls -lA ${{ github.workspace }}/
          ls -lA ${{ github.workspace }}/text_cleaner/ || true
          ls -lA ${{ github.workspace }}/data_analyzer/ || true
          ls -lA ${{ github.workspace }}/bpe_trainer/ || true

      - name: Set and Verify Executable Paths
        id: executables
        run: |
          TC_EXEC="${{ github.workspace }}/text_cleaner/lunaris_text_cleaner"
          DA_EXEC="${{ github.workspace }}/data_analyzer/lunaris_data_analyzer"
          BPE_EXEC="${{ github.workspace }}/bpe_trainer/bpe_processor"
          echo "text_cleaner_exec=$TC_EXEC" >> $GITHUB_OUTPUT
          echo "data_analyzer_exec=$DA_EXEC" >> $GITHUB_OUTPUT
          echo "bpe_processor_exec=$BPE_EXEC" >> $GITHUB_OUTPUT
          all_execs_found=true
          for exec_file in "$TC_EXEC" "$DA_EXEC" "$BPE_EXEC"; do
            if [ ! -f "$exec_file" ] || [ ! -x "$exec_file" ]; then
              echo "ERROR: Executable problem: $exec_file"; all_execs_found=false; fi
          done
          if [[ "$all_execs_found" != "true" ]]; then exit 1; fi
          echo "All C++ executables verified."

      - name: Run Text Cleaner Tests
        run: |
          TEXT_CLEANER_EXEC="${{ steps.executables.outputs.text_cleaner_exec }}"
          mkdir -p ./temp_text_cleaner_input ./temp_text_cleaner_output
          cat <<EOF > ./temp_text_cleaner_input/sample.txt
          <!DOCTYPE html>
          <html> <head><title>Test</title></head> <body>
          <!-- This is a comment -->
          <p>Hello   World!  </p>
          Another line.
          URL: http://example.com and email: test@example.com
          Duplicate Line
          Duplicate Line
          </body> </html>
          EOF

          "$TEXT_CLEANER_EXEC" \
            --input ./temp_text_cleaner_input/sample.txt \
            --output ./temp_text_cleaner_output/cleaned.txt \
            --remove-html --normalize-whitespace --remove-empty-lines \
            --to-lowercase \
            --process-urls --url-placeholder "[url]" \
            --process-emails --email-placeholder "[email]" \
            --remove-exact-duplicates

          # CORREÇÃO AQUI para o expected_output.txt
          cat <<EXPECTED_EOF > expected_output.txt
          test
          hello world!
          another line.
          url: [url] and email: [email]
          duplicate line
          EXPECTED_EOF

          if diff -u expected_output.txt ./temp_text_cleaner_output/cleaned.txt; then
            echo "✅ Text Cleaner test passed on ${{ matrix.os.display }}"
          else
            echo "❌ Text Cleaner test failed on ${{ matrix.os.display }}"
            echo "--- Expected ---"; cat expected_output.txt; echo "--- Actual ---"; cat ./temp_text_cleaner_output/cleaned.txt
            exit 1
          fi

      - name: Run BPE Processor Tests
        run: |
          BPE_EXEC="${{ steps.executables.outputs.bpe_processor_exec }}"
          mkdir -p ./temp_bpe/corpus ./temp_bpe/model_output
          echo -e "hello world this is a test a test\nanother line for another test of the bpe\nhello world again" > ./temp_bpe/corpus/corpus.txt
          "$BPE_EXEC" --action train --corpus ./temp_bpe/corpus/corpus.txt --vocab-size 270 --output ./temp_bpe/model_output/bpe_model/ --mode byte --verbose
          for file in "./temp_bpe/model_output/bpe_model/bpe_model_lunaris.json" "./temp_bpe/model_output/bpe_model/merges_lunaris.txt" "./temp_bpe/model_output/bpe_model/vocabulary_lunaris.txt"; do
            if [ ! -f "$file" ]; then echo "ERROR: Required BPE output file not found: $file"; ls -R ./temp_bpe/model_output/; exit 1; fi
          done
          TOKEN_OUTPUT=$("$BPE_EXEC" --action tokenize --model_path "./temp_bpe/model_output/bpe_model/" --input_text "hello test world" --verbose)
          if [ $? -ne 0 ] || [ -z "$TOKEN_OUTPUT" ]; then echo "ERROR: BPE tokenization failed. Output: $TOKEN_OUTPUT"; exit 1; fi
          echo "✅ BPE Processor test passed on ${{ matrix.os.display }}"

      - name: Cleanup C++ Test Files
        if: always()
        run: rm -rf ./temp_text_cleaner_input ./temp_text_cleaner_output ./expected_output.txt ./temp_bpe
