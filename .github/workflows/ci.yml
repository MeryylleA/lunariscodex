name: Lunaris Codex CI

on:
  push:
    branches: [main]
    paths:
      - 'model.py'
      - 'prepare_data.py'
      - 'train.py'
      - 'inference.py'
      - 'text_cleaner/**'
      - 'data_analyzer/**'
      - 'bpe_trainer/**'
      - 'tests/**'
      - 'Makefile'
      - 'requirements.txt'
      - '.github/workflows/**' # Qualquer mudan√ßa nos workflows
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main]
    paths:
      - 'model.py'
      - 'prepare_data.py'
      - 'train.py'
      - 'inference.py'
      - 'text_cleaner/**'
      - 'data_analyzer/**'
      - 'bpe_trainer/**'
      - 'tests/**'
      - 'Makefile'
      - 'requirements.txt'
      - '.github/workflows/**' # Qualquer mudan√ßa nos workflows
      - 'README.md' # Para que mudan√ßas no README acionem o workflow e ele possa pular os testes
      - 'CONTRIBUTING.md'
      - 'LICENSE'
      - 'docs/**'

env:
  CXXFLAGS_MODE: RELEASE
  PYTHON_VERSION: '3.11'
  PYTHONUTF8: "1"

jobs:
  detect_changes:
    name: Detect Changes & Setup Matrix
    runs-on: ubuntu-latest
    outputs:
      should_run_cpp: ${{ steps.decision.outputs.should_run_cpp }}
      should_run_python: ${{ steps.decision.outputs.should_run_python }}
      docs_only_change: ${{ steps.decision.outputs.docs_only_change }}
      test_matrix: ${{ steps.matrix.outputs.matrix }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect C++ File Changes
        id: cpp_files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            Makefile
            text_cleaner/**
            data_analyzer/**
            bpe_trainer/**

      - name: Detect Python File Changes
        id: python_files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            model.py
            prepare_data.py
            train.py
            inference.py
            tests/**
            requirements.txt

      - name: Detect Documentation File Changes
        id: doc_files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            README.md
            CONTRIBUTING.md
            LICENSE
            docs/**

      - name: Detect CI Configuration Changes
        id: ci_config_files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            .github/workflows/**

      - name: Determine Job Execution Logic
        id: decision
        run: |
          RUN_CPP="false"
          RUN_PYTHON="false"
          DOCS_ONLY="false"

          # Se arquivos C++ mudaram OU se o CI mudou OU se for push/dispatch
          if [[ "${{ steps.cpp_files.outputs.any_changed }}" == "true" || \
                "${{ steps.ci_config_files.outputs.any_changed }}" == "true" || \
                "${{ github.event_name }}" == "push" || \
                "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RUN_CPP="true"
          fi

          # Se arquivos Python mudaram OU se o CI mudou OU se for push/dispatch
          if [[ "${{ steps.python_files.outputs.any_changed }}" == "true" || \
                "${{ steps.ci_config_files.outputs.any_changed }}" == "true" || \
                "${{ github.event_name }}" == "push" || \
                "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RUN_PYTHON="true"
          fi

          # Se apenas arquivos de documenta√ß√£o mudaram E NENHUM arquivo de c√≥digo/CI mudou
          if [[ "${{ steps.doc_files.outputs.any_changed }}" == "true" && \
                "${{ steps.cpp_files.outputs.any_changed }}" == "false" && \
                "${{ steps.python_files.outputs.any_changed }}" == "false" && \
                "${{ steps.ci_config_files.outputs.any_changed }}" == "false" && \
                "${{ github.event_name }}" == "pull_request" ]]; then
            DOCS_ONLY="true"
            # Se for docs_only, n√£o queremos rodar os testes de c√≥digo
            RUN_CPP="false"
            RUN_PYTHON="false"
          fi
          
          # Se o evento for push para main, garantir que tudo rode (a menos que os paths do trigger j√° filtrem)
          # A l√≥gica de push/dispatch acima j√° cobre isso, mas √© bom ter em mente.
          # Se for um PR e nenhum arquivo nos paths do trigger mudou, o workflow nem roda.
          # Se for um PR, mas nenhum dos arquivos de c√≥digo/doc/ci listados no tj-actions mudou,
          # RUN_CPP e RUN_PYTHON ser√£o false, DOCS_ONLY ser√° false (a menos que explicitamente seja doc_files).

          echo "should_run_cpp=$RUN_CPP" >> $GITHUB_OUTPUT
          echo "should_run_python=$RUN_PYTHON" >> $GITHUB_OUTPUT
          echo "docs_only_change=$DOCS_ONLY" >> $GITHUB_OUTPUT

      - name: Setup Test Matrix
        id: matrix
        run: |
          cat <<EOF > matrix.json
          {
            "os": [
              { "name": "ubuntu-latest", "display": "Ubuntu Latest (24.04)", "runner": "ubuntu-latest" },
              { "name": "ubuntu-22.04", "display": "Ubuntu 22.04 LTS", "runner": "ubuntu-22.04" }
            ]
          }
          EOF
          echo "matrix=$(cat matrix.json | jq -c .)" >> $GITHUB_OUTPUT

  # Job que sempre roda para indicar que o CI analisou as mudan√ßas
  analysis_complete:
    name: Change Analysis
    runs-on: ubuntu-latest
    needs: detect_changes
    steps:
      - name: Report Analysis Results
        run: |
          echo "Change analysis complete."
          echo "Run C++ Tests: ${{ needs.detect_changes.outputs.should_run_cpp }}"
          echo "Run Python Tests: ${{ needs.detect_changes.outputs.should_run_python }}"
          echo "Documentation Only Change: ${{ needs.detect_changes.outputs.docs_only_change }}"
          if [[ "${{ needs.detect_changes.outputs.docs_only_change }}" == "true" ]]; then
            echo "‚ÑπÔ∏è This is a documentation-only change. Heavy tests will be skipped."
          elif [[ "${{ needs.detect_changes.outputs.should_run_cpp }}" == "false" && "${{ needs.detect_changes.outputs.should_run_python }}" == "false" ]]; then
            echo "‚ÑπÔ∏è No C++ or Python code changes detected that require testing by this CI configuration."
          fi

  call_cpp_tests:
    name: Call C++ Tests Workflow
    needs: detect_changes
    if: needs.detect_changes.outputs.should_run_cpp == 'true'
    uses: ./.github/workflows/reusable_cpp_tests.yml
    with:
      test_matrix_json: ${{ needs.detect_changes.outputs.test_matrix }}
    secrets: inherit # Para passar segredos, se necess√°rio no futuro

  call_python_tests:
    name: Call Python Tests Workflow
    needs: detect_changes
    if: needs.detect_changes.outputs.should_run_python == 'true'
    uses: ./.github/workflows/reusable_python_tests.yml
    with:
      test_matrix_json: ${{ needs.detect_changes.outputs.test_matrix }}
      python_version: ${{ env.PYTHON_VERSION }}
    secrets: # Passa segredos explicitamente
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      HF_TOKEN: ${{ secrets.HF_TOKEN }}

  ci_status_report:
    name: CI Status Report
    runs-on: ubuntu-latest
    # Depende de todos os jobs que podem rodar (detect_changes √© impl√≠cito pelos outros)
    # O `if: always()` garante que este job rode mesmo se os chamados falharem ou forem pulados.
    needs: [detect_changes, analysis_complete, call_cpp_tests, call_python_tests]
    if: always()
    steps:
      - name: Determine Overall Status
        id: status
        shell: bash
        run: |
          SHOULD_RUN_CPP="${{ needs.detect_changes.outputs.should_run_cpp }}"
          SHOULD_RUN_PYTHON="${{ needs.detect_changes.outputs.should_run_python }}"
          DOCS_ONLY="${{ needs.detect_changes.outputs.docs_only_change }}"

          # Resultado dos jobs chamados. Se n√£o rodaram (skipped), o 'result' √© 'skipped'.
          # Se o job foi pulado pelo 'if' no workflow principal, seu 'result' n√£o estar√° dispon√≠vel ou ser√° 'skipped'.
          # Se 'should_run_cpp' era false, call_cpp_tests foi pulado, ent√£o seu resultado √© 'skipped'.
          CPP_RESULT="${{ needs.call_cpp_tests.result || 'skipped' }}"
          PYTHON_RESULT="${{ needs.call_python_tests.result || 'skipped' }}"
          
          echo "üîç Job Status Summary:"
          echo "  - C++ Tests (should run: $SHOULD_RUN_CPP): $CPP_RESULT"
          echo "  - Python Tests (should run: $SHOULD_RUN_PYTHON): $PYTHON_RESULT"
          echo "  - Docs Only Change: $DOCS_ONLY"

          FINAL_CONCLUSION="SUCCESS" # Assume sucesso

          if [[ "$SHOULD_RUN_CPP" == "true" && "$CPP_RESULT" != "success" ]]; then
            FINAL_CONCLUSION="FAILURE"
          fi
          if [[ "$SHOULD_RUN_PYTHON" == "true" && "$PYTHON_RESULT" != "success" ]]; then
            FINAL_CONCLUSION="FAILURE"
          fi
          
          # Se for docs only, o resultado √© sucesso (pois nada mais deveria rodar)
          if [[ "$DOCS_ONLY" == "true" ]]; then
             FINAL_CONCLUSION="SUCCESS" # Ou um status espec√≠fico como "DOCS_ONLY_SUCCESS"
          fi

          # Se nenhum teste deveria rodar e n√£o era docs_only (caso de arquivos n√£o mapeados sem disparar testes)
          # Isso tamb√©m √© um "sucesso" do ponto de vista de n√£o ter falhas.
          if [[ "$SHOULD_RUN_CPP" == "false" && "$SHOULD_RUN_PYTHON" == "false" && "$DOCS_ONLY" == "false" ]]; then
            FINAL_CONCLUSION="SUCCESS" # Nenhum teste de c√≥digo foi acionado
          fi

          echo "final_conclusion=$FINAL_CONCLUSION" >> "$GITHUB_OUTPUT"
          if [[ "$FINAL_CONCLUSION" == "SUCCESS" ]]; then
            echo "‚úÖ Overall CI Status: SUCCESS"
          else
            echo "‚ùå Overall CI Status: FAILURE"
          fi

      - name: Post Comment (PR)
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
        run: |
          STATUS_ICON="‚úÖ"
          STATUS_TEXT="${{ steps.status.outputs.final_conclusion }}" # Usa a conclus√£o final

          if [[ "${{ steps.status.outputs.final_conclusion }}" == "FAILURE" ]]; then
            STATUS_ICON="‚ùå"
          elif [[ "${{ needs.detect_changes.outputs.docs_only_change }}" == "true" ]]; then
            STATUS_TEXT="SUCCESS (Docs only)"
          elif [[ "${{ needs.detect_changes.outputs.should_run_cpp }}" == "false" && "${{ needs.detect_changes.outputs.should_run_python }}" == "false" ]]; then
            STATUS_TEXT="SUCCESS (No relevant code changes)"
          fi
          
          COMMENT_BODY="---
          **Lunaris Codex CI Status: $STATUS_TEXT $STATUS_ICON**
          Workflow: \`${{ github.workflow }}\`
          Branch: \`${{ github.head_ref }}\` (Commit: \`${{ github.sha }}\`)
          C++ Tests: ${{ needs.call_cpp_tests.result || 'skipped' }}
          Python Tests: ${{ needs.call_python_tests.result || 'skipped' }}
          üîó [View Action Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          *This is an automated message.*"
          gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT_BODY" || echo "‚ö†Ô∏è Failed to post comment."

      - name: Final Status Check
        shell: bash
        run: |
          if [[ "${{ steps.status.outputs.final_conclusion }}" == "FAILURE" ]]; then
            echo "‚ùå CI Pipeline failed - exiting with error code"
            exit 1
          else
            echo "‚úÖ CI Pipeline completed successfully"
          fi
