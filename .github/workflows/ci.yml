name: Lunaris Codex CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv .venv-ci
          source .venv-ci/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create dummy dataset for prepare_data
        run: |
          # Não precisa ativar o venv aqui, pois o 'run' já usa o shell do passo
          mkdir -p ./temp_data
          echo "def func1(): pass" > ./temp_data/sample1.py
          echo "class MyClass: pass" > ./temp_data/sample2.py

      - name: Run prepare_data.py
        # Ativa o venv para este comando específico
        # O shell: bash é implícito para `run` se não especificado
        run: |
          source .venv-ci/bin/activate 
          python prepare_data.py \
            --data_source_type text_file_lines \
            --dataset_name_or_path "./temp_data/*.py" \
            --tokenizer_name_or_path HuggingFaceH4/tiny-llamas \
            --max_length 32 \
            --output_path ./processed_data_ci/ci_prepared_data.memmap \
            --max_examples 2

      - name: Run train.py (toy model)
        run: |
          source .venv-ci/bin/activate
          python train.py \
            --memmap_file_train ./processed_data_ci/ci_prepared_data.memmap \
            --num_sequences_train 2 \
            --tokenizer_name_or_path HuggingFaceH4/tiny-llamas \
            --dataset_max_length 32 \
            --model_max_seq_len 32 \
            --d_model 32 \
            --n_layers 1 \
            --n_heads 1 \
            --batch_size 1 \
            --num_epochs 1 \
            --device cpu \
            --checkpoint_dir ./checkpoints_ci \
            --log_interval 1 \
            --lora_rank 0 \
            --seed 42

      - name: Check for checkpoint files
        run: |
          ls -l ./checkpoints_ci
          # Ajuste o nome do arquivo de checkpoint esperado.
          # O step global será num_examples / batch_size = 2 / 1 = 2.
          # Epoch é 0 (primeira época), então epoch+1 é 1.
          if [ ! -f ./checkpoints_ci/lunaris_codex_epoch-1_step-2.pt ]; then
            echo "Checkpoint file 'lunaris_codex_epoch-1_step-2.pt' not found!"
            # Verifique também se o best_model.pt foi criado se save_strategy=epoch
            # if [ ! -f ./checkpoints_ci/best_model.pt ]; then
            #   echo "best_model.pt not found!"
            #   exit 1
            # fi
            exit 1 # Falha o job se o checkpoint principal não for encontrado
          fi
          echo "Checkpoint files found."
