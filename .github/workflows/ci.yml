# .github/workflows/ci.yml
name: Lunaris Codex CI

on:
  push:
    branches: [ main ]
    paths: # Only run on push to main if these specific code/config files change
      - 'model.py'
      - 'prepare_data.py'
      - 'train.py'
      - 'inference.py'
      - 'text_cleaner/**'
      - 'data_analyzer/**'
      - 'bpe_trainer/**' # Assuming bpe_processor.cpp is still in a dir named bpe_trainer
      - 'tests/**'
      - 'Makefile'
      - 'requirements.txt'
      - '.github/workflows/ci.yml' 
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review] 
    branches: [ main ] 
    paths: # ADDED: Same path filtering for PRs to save resources
      - 'model.py'
      - 'prepare_data.py'
      - 'train.py'
      - 'inference.py'
      - 'text_cleaner/**'
      - 'data_analyzer/**'
      - 'bpe_trainer/**'
      - 'tests/**'
      - 'Makefile'
      - 'requirements.txt'
      - '.github/workflows/ci.yml'
      - '.github/workflows/auto_merge_pr.yml' # If changes to auto-merge logic
  workflow_dispatch: 

jobs:
  build_and_test_cpp:
    name: Build & Test C++ Utilities
    runs-on: ubuntu-latest
    outputs: 
      text_cleaner_exec: ${{ steps.set_exec_paths.outputs.text_cleaner_exec }}
      data_analyzer_exec: ${{ steps.set_exec_paths.outputs.data_analyzer_exec }}
      bpe_processor_exec: ${{ steps.set_exec_paths.outputs.bpe_processor_exec }} 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install C++ dependencies (nlohmann-json)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y nlohmann-json3-dev 

      - name: Initial C++ Artifact Cleanup (Best Effort)
        run: |
          make clean || echo "Pre-run 'make clean' info: No Makefile/artifacts or clean failed, proceeding."

      - name: Cache C++ build artifacts (executables)
        id: cache-cpp-executables
        uses: actions/cache@v4
        with:
          path: | 
            text_cleaner/lunaris_text_cleaner
            data_analyzer/lunaris_data_analyzer
            bpe_trainer/bpe_processor 
          key: ${{ runner.os }}-cpp-exec-${{ hashFiles('Makefile', 'text_cleaner/**/*.cpp', 'data_analyzer/**/*.cpp', 'bpe_trainer/**/*.cpp') }}
          restore-keys: |
            ${{ runner.os }}-cpp-exec-

      - name: Build C++ Utilities (if not cached)
        if: steps.cache-cpp-executables.outputs.cache-hit != 'true'
        run: |
          make all CXXFLAGS_MODE=RELEASE 
          echo "C++ utilities built."

      - name: Set C++ executable paths
        id: set_exec_paths 
        run: |
          echo "text_cleaner_exec=text_cleaner/lunaris_text_cleaner" >> $GITHUB_OUTPUT
          echo "data_analyzer_exec=data_analyzer/lunaris_data_analyzer" >> $GITHUB_OUTPUT
          echo "bpe_processor_exec=bpe_trainer/bpe_processor" >> $GITHUB_OUTPUT 
          if [[ "${{ steps.cache-cpp-executables.outputs.cache-hit }}" == "true" ]]; then
            echo "C++ executables were restored from cache."
          fi

      - name: Create dummy text file for Text Cleaner CI
        run: |
          mkdir -p ./temp_text_cleaner_ci_input
          cat <<EOF > ./temp_text_cleaner_ci_input/sample_for_cleaner.txt
          <!DOCTYPE html>
          <html> <head><title>Test</title></head> <body>
          <!-- This is a comment -->
          <p>Hello   World!  </p>
          <script>alert("script content");</script>
          Another line.
          URL: http://example.com and email: test@example.com
          Duplicate Line
          Duplicate Line
          </body> </html>
          EOF
          mkdir -p ./temp_text_cleaner_ci_output

      - name: Run and Test C++ Text Cleaner
        run: |
          TEXT_CLEANER_EXEC="./${{ steps.set_exec_paths.outputs.text_cleaner_exec }}"
          if [ ! -f "$TEXT_CLEANER_EXEC" ]; then echo "ERROR: Text Cleaner executable '$TEXT_CLEANER_EXEC' not found!"; exit 1; fi
          
          "$TEXT_CLEANER_EXEC" \
            --input ./temp_text_cleaner_ci_input/sample_for_cleaner.txt \
            --output ./temp_text_cleaner_ci_output/cleaned_sample.txt \
            --remove-html --normalize-whitespace --remove-empty-lines \
            --to-lowercase \
            --process-urls --url-placeholder "[url]" \
            --process-emails --email-placeholder "[email]" \
            --remove-exact-duplicates || { echo "Text Cleaner execution failed"; exit 1; }
          
          cat <<-EXPECTED_EOF > expected_output_tc.txt
          test
          hello world!
          another line.
          url: [url] and email: [email]
          duplicate line
          EXPECTED_EOF
          
          echo "--- Actual Cleaned Output (from file) ---"
          cat ./temp_text_cleaner_ci_output/cleaned_sample.txt
          echo "--- Expected Output ---"
          cat expected_output_tc.txt

          if diff -a -u expected_output_tc.txt ./temp_text_cleaner_ci_output/cleaned_sample.txt; then
            echo "Text Cleaner output matches expected content."
          else
            echo "ERROR: Text Cleaner output does NOT match expected content. Diff shown above."
            exit 1
          fi

      - name: Create dummy corpus for BpeProcessor CI
        id: bpe_corpus_setup
        run: |
          mkdir -p ./temp_bpe_ci/corpus
          mkdir -p ./temp_bpe_ci/model_output
          echo "hello world this is a test a test" > ./temp_bpe_ci/corpus/corpus.txt
          echo "another line for another test of the bpe" >> ./temp_bpe_ci/corpus/corpus.txt
          echo "hello world again" >> ./temp_bpe_ci/corpus/corpus.txt
          echo "Corpus for BpeProcessor created."

      - name: Test BpeProcessor - Train Action
        id: bpe_train_test
        run: |
          BPE_EXEC="./${{ steps.set_exec_paths.outputs.bpe_processor_exec }}"
          if [ ! -f "$BPE_EXEC" ]; then echo "ERROR: BpeProcessor executable '$BPE_EXEC' not found!"; exit 1; fi
          
          echo "--- Testing BpeProcessor: Train Action ---"
          "$BPE_EXEC" \
            --action train \
            --corpus ./temp_bpe_ci/corpus/corpus.txt \
            --vocab-size 270 \
            --output ./temp_bpe_ci/model_output/ci_bpe_model/ \
            --mode byte --verbose || { echo "BpeProcessor 'train' action failed"; exit 1; } 
            
          if [ ! -f "./temp_bpe_ci/model_output/ci_bpe_model/bpe_model_lunaris.json" ] || \
             [ ! -f "./temp_bpe_ci/model_output/ci_bpe_model/merges_lunaris.txt" ] || \
             [ ! -f "./temp_bpe_ci/model_output/ci_bpe_model/vocabulary_lunaris.txt" ]; then
            echo "ERROR: BpeProcessor 'train' action did not create all expected output files!"
            ls -R ./temp_bpe_ci/model_output/
            exit 1
          fi
          echo "BpeProcessor 'train' action successful and output files found."

      - name: Test BpeProcessor - Tokenize Action
        if: success() && steps.bpe_train_test.outcome == 'success'
        run: |
          BPE_EXEC="./${{ steps.set_exec_paths.outputs.bpe_processor_exec }}"
          MODEL_PATH="./temp_bpe_ci/model_output/ci_bpe_model/" 
          INPUT_TEXT="hello test world"
          
          echo "--- Testing BpeProcessor: Tokenize Action ---"
          echo "Input text for tokenization: '$INPUT_TEXT'"
          
          TOKEN_IDS_OUTPUT=$("$BPE_EXEC" --action tokenize --model_path "$MODEL_PATH" --input_text "$INPUT_TEXT" --verbose)
          
          if [ $? -ne 0 ]; then
            echo "ERROR: BpeProcessor 'tokenize' action failed."
            echo "Output was: $TOKEN_IDS_OUTPUT"
            exit 1
          fi
          
          if [ -z "$TOKEN_IDS_OUTPUT" ]; then
            echo "ERROR: BpeProcessor 'tokenize' action produced empty output for non-empty input."
            exit 1
          fi
          if ! echo "$TOKEN_IDS_OUTPUT" | grep -qE '[0-9]+'; then
            echo "ERROR: BpeProcessor 'tokenize' output does not look like token IDs: $TOKEN_IDS_OUTPUT"
            exit 1
          fi
          echo "BpeProcessor 'tokenize' action successful. Output (first 50 chars): ${TOKEN_IDS_OUTPUT:0:50}..."

      - name: Post C++ Job Failure Comment & Cleanup 
        if: always() 
        run: |
          if [[ "${{ job.status }}" == "failure" && "${{ github.event_name }}" == "pull_request" ]]; then
            echo "::group::Posting C++ Job Failure Comment"
            # Using here document for multiline body, ensure EOF is not indented
            read -r -d '' COMMENT_BODY <<EOF
          ---
          **Lunaris Codex CI Status: FAILED ❌** 
          Workflow: \`${{ github.workflow }}\`
          Job: \`${{ job.name || github.job }}\` (C++ Utilities Test)
          Branch: \`${{ github.head_ref }}\` (Commit: \`${{ github.sha }}\`)

          Some C++ utility checks have failed. Please review the errors.
          ➡️ [View Action Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          *This is an automated message from your friendly Lunaris Codex CI.*
          EOF
            gh issue comment ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --body "$COMMENT_BODY" \
            || echo "Warning: Failed to post C++ failure comment."
            echo "::endgroup::"
          fi
          echo "Performing C++ job temporary test files cleanup..."
          rm -rf ./temp_text_cleaner_ci_input ./temp_text_cleaner_ci_output expected_output_tc.txt \
                 ./temp_bpe_ci 
          echo "C++ job temporary test files cleanup complete."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

  test_python_suite:
    name: Test Python Suite
    runs-on: ubuntu-latest
    needs: [] 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt 
      - name: Run Pytest for model.py (Unit Tests)
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd) 
          pytest tests/ -k "test_model" --cov=model --cov-report=xml --cov-report=term-missing
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4 
        with:
          token: ${{ secrets.CODECOV_TOKEN }} 
          files: ./coverage.xml 
          flags: model-tests 
      - name: Create dummy datasets for Python script CI
        run: |
          mkdir -p ./temp_data_ci_train
          echo "def train_function_one(): return 'train1'" > ./temp_data_ci_train/train_sample_1.py
          echo "class TrainSampleClass:\n  value = 'train2'" > ./temp_data_ci_train/train_sample_2.py
          mkdir -p ./temp_data_ci_val
          echo "def validation_function(): return 'validation_data_here'" > ./temp_data_ci_val/val_sample_1.py
          echo "# Another validation line" > ./temp_data_ci_val/val_sample_2.py
      - name: Run prepare_data.py for CI datasets
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }} 
        run: |
          python prepare_data.py \
            --data_source_type text_file_lines \
            --dataset_name_or_path "./temp_data_ci_train/*.py" \
            --tokenizer_name_or_path gpt2 \
            --output_path ./processed_data_ci/ci_train_data.memmap \
            --max_length 32 --max_examples 2 --overwrite_output

          python prepare_data.py \
            --data_source_type text_file_lines \
            --dataset_name_or_path "./temp_data_ci_val/*.py" \
            --tokenizer_name_or_path gpt2 \
            --output_path ./processed_data_ci/ci_val_data.memmap \
            --max_length 32 --max_examples 2 --overwrite_output
      - name: Run train.py (toy model with validation)
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }} 
        run: |
          python train.py \
            --memmap_file_train ./processed_data_ci/ci_train_data.memmap \
            --num_sequences_train 2 \
            --memmap_file_val ./processed_data_ci/ci_val_data.memmap \
            --num_sequences_val 2 \
            --tokenizer_name_or_path gpt2 \
            --dataset_max_length 32 --dataset_dtype int32 \
            --model_max_seq_len 32 --d_model 32 --n_layers 1 --n_heads 1 \
            --batch_size 1 --num_epochs 1 --device cpu \
            --checkpoint_dir ./checkpoints_ci \
            --log_interval 1 --save_strategy epoch \
            --lora_rank 0 --seed 42
      - name: Check for checkpoint files
        id: check_ckpts
        run: |
          echo "Listing contents of checkpoint directory: ./checkpoints_ci"
          ls -R ./checkpoints_ci
          MAIN_CKPT_FILE_PATTERN="./checkpoints_ci/lunaris_codex_epoch-1_step-*.pt" 
          BEST_MODEL_FILE="./checkpoints_ci/best_model.pt"
          if ! ls $MAIN_CKPT_FILE_PATTERN 1> /dev/null 2>&1; then 
            echo "ERROR: Main checkpoint file matching '$MAIN_CKPT_FILE_PATTERN' not found!"
            exit 1
          fi
          if [ ! -f "$BEST_MODEL_FILE" ]; then 
            echo "ERROR: '$BEST_MODEL_FILE' not found!"
            exit 1
          fi
          echo "All expected checkpoint files found."
      - name: Test inference.py with toy model checkpoint
        if: success() && steps.check_ckpts.outcome == 'success'
        run: |
          CHECKPOINT_TO_TEST="./checkpoints_ci/best_model.pt"
          OUTPUT=$(python inference.py \
            --checkpoint_path "$CHECKPOINT_TO_TEST" \
            --tokenizer_name_or_path gpt2 \
            --prompt "Test prompt:" \
            --max_new_tokens 5 \
            --temperature 0.5 \
            --device cpu --no_color) 
          if [ $? -eq 0 ] && [ -n "$OUTPUT" ]; then
            echo "Inference script ran successfully."
            echo "Generated output snippet (first 100 chars): ${OUTPUT:0:100}..."
          else
            echo "ERROR: Inference script failed or produced no output."
            echo "Output was: $OUTPUT" 
            exit 1
          fi
      - name: Post Python Job Failure Comment & Cleanup 
        if: always()
        run: |
          if [[ "${{ job.status }}" == "failure" && "${{ github.event_name }}" == "pull_request" ]]; then
            echo "::group::Posting Python Job Failure Comment"
            # Using here document for multiline body, ensure EOF is not indented
            read -r -d '' COMMENT_BODY <<EOF
          ---
          **Lunaris Codex CI Status: FAILED ❌** 
          Workflow: \`${{ github.workflow }}\`
          Job: \`${{ job.name || github.job }}\` (Python Suite Test)
          Branch: \`${{ github.head_ref }}\` (Commit: \`${{ github.sha }}\`)

          Some Python checks or script executions have failed. Please review the errors.
          ➡️ [View Action Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          *This is an automated message from your friendly Lunaris Codex CI.*
          EOF
            gh issue comment ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --body "$COMMENT_BODY" \
            || echo "Warning: Failed to post Python failure comment."
            echo "::endgroup::"
          fi
          echo "Cleaning up Python CI temporary files..."
          rm -rf ./temp_data_ci_train ./temp_data_ci_val \
                 ./processed_data_ci ./checkpoints_ci \
                 ./coverage.xml
          echo "Python CI cleanup process complete."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
