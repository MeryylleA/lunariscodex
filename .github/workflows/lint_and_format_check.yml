name: Lint and Format Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint-format:
    name: Run Linters and Format Checkers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies and linters
        run: |
          python -m venv .venv-lint # Nome do venv no CI
          source .venv-lint/bin/activate
          pip install --upgrade pip
          pip install flake8 black isort
          # Se flake8 precisar das dependências do projeto para entender os imports:
          # pip install -r requirements.txt 

      - name: Run Python Linters and Formatters
        run: |
          source .venv-lint/bin/activate
          
          echo "Running flake8..."
          # Tentar com o exclude explícito no comando, além do .flake8
          flake8 . --exclude=.git,__pycache__,.venv-lint,build,dist,*.egg-info,processed_*,checkpoints_*,temp_*,data_analyzer,text_cleaner,tests \
                   --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --exclude=.git,__pycache__,.venv-lint,build,dist,*.egg-info,processed_*,checkpoints_*,temp_*,data_analyzer,text_cleaner,tests \
                   --count --exit-zero --max-complexity=12 --max-line-length=127 --statistics
          
          echo "Checking formatting with black..."
          # Black e isort geralmente respeitam bem o pyproject.toml
          black --check --diff .
          
          echo "Checking import order with isort..."
          isort --check-only --diff .

      - name: Setup C++ Formatting Check (clang-format)
        run: |
          sudo apt-get update && sudo apt-get install -y clang-format
          
      - name: Run C++ Formatting Check (clang-format)
        run: |
          echo "Checking C++ formatting with clang-format..."
          # Certifique-se que .clang-format está na raiz ou especifique --style=file:<caminho>
          # Ou use um estilo padrão: --style=Google ou --style=LLVM
          # Este comando assume que .clang-format está na raiz e será pego automaticamente.
          find ./data_analyzer/ ./text_cleaner/ -iname '*.cpp' -o -iname '*.h' | xargs clang-format --dry-run -Werror
          echo "C++ formatting check complete."
