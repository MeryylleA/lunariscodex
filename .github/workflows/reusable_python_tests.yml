# .github/workflows/reusable_python_tests.yml

name: Reusable Python Tests

on:
  workflow_call:
    inputs:
      test_matrix_json:
        description: 'JSON string of the OS matrix for tests'
        required: true
        type: string
      python_version:
        description: 'Python version to use'
        required: true
        type: string
    secrets:
      CODECOV_TOKEN:
        required: true # Mantenha se você usa Codecov
      HF_TOKEN:
        required: false # Pode ser necessário para baixar tokenizers/modelos em testes futuros
    outputs:
      python_test_result:
        description: "Result of the Python tests"
        value: ${{ jobs.python_suite.result }}

env:
  PYTHONUTF8: "1" # Boa prática para consistência de encoding

jobs:
  python_suite:
    name: Python Tests (${{ matrix.os.display }} on Python ${{ inputs.python_version }})
    runs-on: ${{ matrix.os.runner }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(inputs.test_matrix_json) }}
    defaults:
      run:
        shell: bash
    env:
      # Disponibilizar o HF_TOKEN para os testes, caso algum precise baixar modelos/tokenizers protegidos
      # ou para evitar rate limits do Hugging Face Hub.
      HF_TOKEN: ${{ secrets.HF_TOKEN }} 

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Display Python Info
        run: |
          python --version
          pip --version
          pip list # Opcional: listar pacotes instalados para depuração

      - name: Cache Python Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          # Chave de cache mais robusta: inclui OS, versão do Python e hash do requirements
          key: ${{ matrix.os.runner }}-pip-${{ inputs.python_version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ matrix.os.runner }}-pip-${{ inputs.python_version }}-

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Certifique-se que pytest e pytest-cov estão em requirements.txt
          # ou instale-os explicitamente aqui se preferir mantê-los fora do requirements principal:
          # pip install pytest pytest-cov

      - name: Run Pytest (Unit and Integration Tests)
        run: |
          python -m pytest tests/ -v \
            --cov=. \
            --cov-report=xml:coverage-${{ matrix.os.name }}-${{ inputs.python_version }}.xml \
            --cov-report=term-missing \
            --tb=short
            # -v para saída verbosa do pytest
            # --cov=. para cobertura de todos os arquivos .py no diretório raiz e subdiretórios
            # (você pode especificar módulos: --cov=model --cov=prepare_data etc.)
            # --tb=short para tracebacks mais curtos em caso de falha

      - name: Upload Coverage Report to Codecov
        # Enviar relatório de cobertura apenas de uma combinação (ex: ubuntu-latest e a versão Python principal do projeto)
        # para evitar duplicatas no Codecov.
        # Assumindo que env.PYTHON_VERSION no workflow principal (ci.yml) define sua versão Python primária.
        if: success() && matrix.os.name == 'ubuntu-latest' && inputs.python_version == '${{ env.PYTHON_VERSION }}' && secrets.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage-${{ matrix.os.name }}-${{ inputs.python_version }}.xml
          flags: python-tests,${{ matrix.os.name }} # Flags para agrupar relatórios no Codecov
          name: codecov-${{ matrix.os.name }}-${{ inputs.python_version }} # Nome do upload no Codecov
          fail_ci_if_error: false # Defina como 'true' se quiser que o CI falhe se o upload para Codecov falhar
